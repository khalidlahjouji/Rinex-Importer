"""
/***************************************************************************
 RinexImporterDialog
                                 A QGIS plugin
 Importer des fichiers RINEX et afficher leurs points GNSS dans QGIS
 Generated by Plugin Builder
                             -------------------
        begin                : 2025-03-23
        git sha              : $Format:%H$
        author               : khalid.lahjouji
        email                : khalid.lahjouji@gmail.com
 ***************************************************************************/

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
"""

import os
import shutil
import math
from PyQt5.QtWidgets import QDialog, QFileDialog, QMessageBox
from .ui_rinex_importer_dialog import Ui_RinexImporterDialog
from PyQt5.QtWidgets import QDialog, QFileDialog, QMessageBox, QProgressBar
from qgis.core import QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY, QgsProject
from qgis.PyQt.QtGui import QIcon
from PyQt5 import QtWidgets
from datetime import datetime

class RinexImporterDialog(QDialog, Ui_RinexImporterDialog):
    def __init__(self, parent=None):
        """Constructeur du dialogue."""
        super().__init__(parent)
        self.setupUi(self)
        
        # Connecter les boutons aux fonctions
        self.btnSelectFolder.clicked.connect(self.select_folder)
        self.btnImport.clicked.connect(self.import_data)

    def select_folder(self):
        """Ouvre une bo√Æte de dialogue pour s√©lectionner un dossier et met √† jour l'UI."""
        folder = QFileDialog.getExistingDirectory(self, "S√©lectionner un dossier contenant des fichiers RINEX")

        if folder:
            self.lblFolderPath.setText(folder)  # Assure-toi que cette ligne est bien ex√©cut√©e
            self.txtFolderPath.setText(folder)  # Mise √† jour ici
    def import_data(self):
        folder = self.txtFolderPath.text().strip()
        if not folder or folder == "Aucun dossier s√©lectionn√©":
            QtWidgets.QMessageBox.warning(self, "Erreur", "Veuillez s√©lectionner un dossier contenant des fichiers RINEX.")
            return

        rinex_files = [f for f in os.listdir(folder) if f.endswith('.25o')]
        if not rinex_files:
            QtWidgets.QMessageBox.warning(self, "Erreur", "Aucun fichier RINEX (.25o) trouv√© dans le dossier s√©lectionn√©.")
            return
        
        # Garder lblFolderPath pour afficher le chemin du dossier
        self.lblFolderPath.setText(f"Nombre de fichiers RINEX trouv√©s : {len(rinex_files)}")
        
        # üü¢ Cr√©ation d'une seule couche m√©moire pour tous les points
        uri = "Point?crs=EPSG:4326&field=id:integer&field=name:string&field=lat:double&field=lon:double&field=alt:double&field=antenna_h:double&field=receiver:string&field=date:string"
        layer = QgsVectorLayer(uri, "Points GNSS", "memory")
        provider = layer.dataProvider()

        # üîµ Ajout de la barre de progression
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setMinimum(0)
        self.progress_bar.setMaximum(len(rinex_files))
        self.progress_bar.setValue(0)
        self.verticalLayout.addWidget(self.progress_bar)

        # üü¢ Ajout progressif des points avec ID auto-incr√©ment√©
        point_id = 1  
        for i, rinex_file in enumerate(rinex_files):  
            file_path = os.path.join(folder, rinex_file)
            data = self.extraire_donnees_rinex(file_path)
            if data:
                self.ajouter_point_qgis(provider, data, point_id)
                point_id += 1  

            self.progress_bar.setValue(i + 1)  # üîÑ Mise √† jour de la barre de progression

        # üîÑ Mise √† jour et ajout de la couche dans QGIS
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

        QtWidgets.QMessageBox.information(self, "Succ√®s", "Tous les points ont √©t√© ajout√©s dans QGIS.")
        self.close()  # Ferme la bo√Æte de dialogue


    def is_rinex_file(self, filename):
        return filename.lower().endswith(('.obs', '.rnx', '.25o'))

    def extraire_donnees_rinex(self, file_path):
        try:
            with open(file_path, 'r') as file:
                lines = file.readlines()

            x, y, z = None, None, None
            point_name, antenna_height, receiver,date_obs = None, None, None, None

            for line in lines:
                if "MARKER NAME" in line:
                    point_name = line[:50].strip()
                elif "APPROX POSITION XYZ" in line:
                    valeurs = list(map(float, line[:60].split()))
                    if len(valeurs) == 3:
                        x, y, z = valeurs
                elif "ANTENNA: DELTA H/E/N" in line:
                    valeurs = line.split()  # Divise la ligne en plusieurs morceaux
                    if len(valeurs) >= 1:
                        try:
                            antenna_height = float(valeurs[0])  # La premi√®re valeur est la hauteur de l'antenne
                        except ValueError:
                            antenna_height = 0.0  # D√©faut si erreur
                elif "REC # / TYPE / VERS" in line:
                    receiver = line[:20].strip()
                elif "TIME OF FIRST OBS" in line:
                    if line[:43].strip():  # V√©rifie si la ligne n'est pas vide ou None
                        
                        # La cha√Æne de caract√®res originale 
                        date_str = line[:43].strip()

                        # Nettoyage des espaces multiples
                        date_str = " ".join(date_str.split())

                        # D√©coupage des √©l√©ments
                        parts = date_str.split()

                        # Extraction des valeurs
                        year, month, day = parts[0], parts[1], parts[2]
                        hour, minute, second_with_ms = parts[3], parts[4], parts[5]

                        # S√©paration de la seconde et des millisecondes
                        second, microseconds_full = second_with_ms.split('.')
                        microseconds = microseconds_full[:2]
                        # Construire la date finale

                        formatted_date = f"{year}-{month}-{day}-{hour}:{minute}:{second}.{microseconds}"
                        date_obs = formatted_date

                    else:
                        date_obs = None  # D√©finit √† None si la ligne est vide  

            if x is not None and y is not None and z is not None:
                lat, lon, alt = self.ecef_to_geodetic(x, y, z)
                return {
                    "name": point_name if point_name else "Unknown",
                    "latitude": lat,
                    "longitude": lon,
                    "altitude": alt,
                    "antenna_height": antenna_height if antenna_height else 0.0,
                    "receiver": receiver if receiver else "Unknown",
                    "date_observation": date_obs if date_obs else "Unknown"
                }
            else:
                print(f"Coordonn√©es non trouv√©es dans {file_path}")
                return None

        except Exception as e:
            print(f"Erreur lors de la lecture de {file_path}: {e}")
            return None

    def ecef_to_geodetic(self, x, y, z):
        a = 6378137.0  
        e2 = 0.00669437999014  
        lon = math.atan2(y, x)
        p = math.sqrt(x**2 + y**2)
        lat = math.atan2(z, p * (1 - e2))  
        for _ in range(5):  
            N = a / math.sqrt(1 - e2 * math.sin(lat)**2)
            alt = p / math.cos(lat) - N
            lat = math.atan2(z, p * (1 - e2 * (N / (N + alt))))

        return math.degrees(lat), math.degrees(lon), alt

    def ajouter_point_qgis(self, provider, data, feature_id):
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(data["longitude"], data["latitude"])))

        # üü¢ V√©rifier l'ordre des valeurs
        feature.setAttributes([
            feature_id,  # ID auto-incr√©ment√©
            data["name"],  
            data["latitude"],  
            data["longitude"],  
            data["altitude"],  
            data["antenna_height"],  
            data["receiver"],
            data["date_observation"]
        ])

        provider.addFeature(feature)  # Ajout du point
